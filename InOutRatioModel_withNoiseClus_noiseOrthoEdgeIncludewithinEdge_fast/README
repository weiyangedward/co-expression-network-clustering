This dir contains src code and test data for clustering with noise cluster. Please note that this is a fast implementation of clustering model using adjacent list representation of the network. Time complexity is O(N) where N is the #nodes in the network for each iteration. Number of iterations depends on the simulated annealing process. This code is similar to 'InOutRatioModel_withNoiseClus_noiseOrthoEdge_fast', the only difference is this code further refine the objective function, specifically in the ortholog edge part by counting both of cross and within edges in the noise cluster, where the within edges are those edges with end nodes within the noise cluster. This change allows cross species ortholog genes to be inside the noise cluster once they cannot improve the in/out-density of a cluster. Another insight is that an edge with both end nodes inside the noise cluster will contribute to the final score, which is competing with the case when an ortholog edge within a normal cluster and this will only improve the final score when the end nodes increases the in/out-density of that cluster.

Model for clustering:
	1) Cost function for one species:
		C = - (sum_over_i(in_cluster_density(i) / ( in_cluster_density(i) + out_cluster_density(i))) * n + lamda * noise_term)
		where
		N: #total genes in network
		n: size(i)
		i: cluster i
		in_cluster_density(i): in_cluster_edges / (n * (n-1) / 2)
		out_cluster_density(i): out_cluster_edges / ((N-n) * n)
		noise_term: #genes in noise cluster
		lamda: sum_over_i(in_cluster_density(i) / ( in_cluster_density(i) + out_cluster_density(i))) / N
	2) There will be k+1 clusters in the output clustering, where cluster0 is noise cluster and k is the number of clusters specified in arguments
	3) ortholog term: a ortholog term is finally added to the cost function. This term is #(ortholog edges where both end nodes of it are in the same cluster). A noise term for ortholog term is also added. Noise term = #(ortholog edges in noise cluster and is cross-cluster)

To compile:
>> cd src
>> g++ -O3 -o bin/clustering -Wno-deprecated -std=c++0x *.cpp

To test code on test data:
>> ./src/bin/clustering
>> ./src/bin/clustering 10 1 1 test_data/orth.txt 3 test_data/network0.txt test_data/network1.txt test_data/network2.txt -t 1 2>log >out

Tips:
	1) To get results sooner, try smaller '-t'
	2) To get clusters with higher in/out denstiy ratio, try smaller 'couplingConstant'
	3) To get smaller cost, try larger '-t'
	4) To include noise cluster in the clustering results, use '-n'. Cluster0 is the noise cluster

	
